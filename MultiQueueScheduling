#include<cstdio>
#include<cstdlib>
#include<ctime>
#include<queue>
using namespace std;

void accept();
void WaitTime(struct process *q,int);
void TurnAroundTime(struct process *q,int);
void Queue1(struct process *q,int size);
void RR();
void RRAlgo(struct process *q,int size);
void PrioSorting();
void PriorityScheduling(struct process *q,int size);
void FCFS();
void FCFSAlgo(struct process *q,int size);
void InnerQueue(struct process);
void Queue1(struct process *,int);

struct process{
	int priority;
	int bt;
	int pid;
	int wt;
	int tat;
	int rt;
	int at;
};

int s1,s2,s3,n;
struct process *q1,*q2,*q3;
int time_quantum = 4;
void accept(){
	printf("\n Total Number of Process:\t");
	scanf("%d",&n);
	
    q1 = (struct process *)malloc(n*sizeof(struct process));
	q2 = (struct process *)malloc(n*sizeof(struct process));
    q3 = (struct process *)malloc(n*sizeof(struct process));
	for(int i=0;i<n;i++){
		struct process p;
		printf("\n\t\tProcess %d\n=============================================\n\n",i+1);
		printf("PId:\t");
		scanf("%d",&p.pid);
		printf("\nArrival Time: %d\t",p.at);
		scanf("%d",&p.at);
		printf("Priority (1-30):\t");
		scanf("%d",&p.priority);
		printf("\nBurst Time: %d\t",p.bt);
		scanf("%d",&p.bt);
		p.rt = p.bt;
	    
		if(p.priority>0 && p.priority<=10){
			q1[s1++]  = p;
		}else if(p.priority>11 && p.priority<=20){
			q2[s2++] = p;
		}else{
			q3[s3++] = p;
		}		
	}
}

void FCFS(){
	printf("\n\t\tFCFS Queue\t");
	printf("\n===========================================================================\n\n");
	FCFSAlgo(q1,s1);
	Queue1(q1,s1);
}

void FCFSAlgo(struct process *q,int size){
	for(int i=0;i<size;i++){
		for(int j=0;j<size;j++){
			if(q[j].at>q[i].at){
				struct process t = q[i];
				q[i] = q[j];
				q[j] = t;
			}
		}
	}
}

void PrioSorting(){
	printf("\n\t\tPriority Queue\t");
	printf("\n===========================================================================\n\n");
	PriorityScheduling(q2,s2);
	Queue1(q2,s2);
}

void PriorityScheduling(struct process *q,int size){
	for(int i=0;i<size;i++){
		for(int j=0;j<size;j++){
			if(q[j].priority>q[i].priority){
				struct process t = q[i];
				q[i] = q[j];
				q[j] = t;
			}
		}
	}
}

void RR(){
	printf("\n\t\tRR Queue\t");
	printf("\n===========================================================================\n\n");

	printf("\nPId\t\tPriority\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time");
	printf("\n================================================================================\n");
	WaitTime(q3,s3);
	TurnAroundTime(q3,s3);
	RRAlgo(q3,s3);
}

void RRAlgo(struct process *q,int size){
	int time=0,i=0,remain=size,flag=0,wt=0,tat=0,total_times=0;
	for(time=0,i=0;remain!=0;){
		struct process p = q[i];
		if(p.rt<=time_quantum && p.rt>0){
			time += p.rt;
			p.rt = 0;
			flag = 1;
		}else if(p.rt>time_quantum){
			p.rt -= time_quantum;
			time += time_quantum;
		}
		if(p.rt==0 && flag==1){
			remain--;
			printf("\n%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d",p.pid,p.priority,p.bt,p.wt,p.tat);
			wt += time -p.at - p.bt;
			tat += time -p.at;
			flag = 0;
		}
		
		if(i==remain-1){
			i=0;
		}else if(q[i+1].at<time){
			i++;
		}else{
			i=0;
		}
		q[i] = p;
	}
	printf("\nAverage Waiting Time= %f\n",wt/n); 
	printf("Avg Turnaround Time = %f\n",tat/n); 	
}

void Queue1(struct process *q,int size){	
	WaitTime(q,size);
	TurnAroundTime(q,size);
	printf("\nPId\t\tPriority\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time\t\tArrival");
	printf("\n================================================================================\n");
	for(int i=0;i<size;i++){
		InnerQueue(q[i]);
	}
	printf("\n\n");
}
void TurnAroundTime(struct process *q,int size){
	q[0].wt= 0;
	for(int i=0;i<size;i++){
		q[i].tat = q[i].wt + q[i].bt;
	}
}

 void WaitTime(struct process *q,int size){
	q[0].wt = 0;
	for(int i=1;i<size;i++){
		q[i].wt = q[i-1].wt + q[i-1].bt;
	}
}

void InnerQueue(struct process p){
	printf("\n%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d\t\t%d",p.pid,p.priority,p.bt,p.wt,p.tat,p.at);
}

int main(){
	accept();
	int i=1;
	while(n>0){
		switch(i){	
			case 1:
				FCFS();
				break;
			case 2:
				PrioSorting();
				break;
			case 3:
				RR();
				break;
		}
				i++;
	    sleep(10);
	}
	printf("\n\n");
}
